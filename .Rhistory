)
}
#--------------------------------------------------------------------------
# --- 4. EXECUTION OF ALL ANALYSES ---
#--------------------------------------------------------------------------
evo_models_list <- list(
"Brownian" = corBrownian(1, tree, form = ~species),
"Pagel"    = corPagel(1, tree, fixed = FALSE, form = ~species),
"Martins"  = corMartins(1, tree, fixed = FALSE, form = ~species),
"Grafen"   = corGrafen(0.5, tree, fixed = FALSE, form = ~species)
)
analysis_grid <- expand_grid(predictor = bio_vars, evo_model_name = names(evo_models_list))
pb <- progress_bar$new(format = " Running models [:bar] :percent in :elapsed | ETA: :eta", total = nrow(analysis_grid) * 2, clear = FALSE, width = 80)
message("Starting execution of all PGLS models...")
all_results <- pmap_df(analysis_grid, function(predictor, evo_model_name) {
pb$tick(); result_pure <- run_pgls_master(predictor, evo_model_name, evo_models_list[[evo_model_name]], data_scaled, NULL)
pb$tick(); result_pcnm <- run_pgls_master(predictor, evo_model_name, evo_models_list[[evo_model_name]], data_scaled, pcnm_covariates)
bind_rows(result_pure, result_pcnm)
})
#--------------------------------------------------------------------------
# --- 5. FINAL CONSOLIDATION AND EXPORT ---
#--------------------------------------------------------------------------
final_results_table <- all_results %>% arrange(Variable, Evolutionary_Model, Model_Type)
#write.csv(final_results_table, "PGLS_Lima.csv", row.names = FALSE)
message("\nMain analysis completed successfully!")
message("All results have been saved to 'PGLS_Final_Compiled_Results.csv'")
#--------------------------------------------------------------------------
# --- 6. MODEL COMPARISON AND SELECTION ---
#--------------------------------------------------------------------------
message("\nCalculating AIC-based model ranks...")
aic_ranking <- final_results_table %>%
filter(!is.na(AIC)) %>% group_by(Variable) %>%
mutate(delta_AIC = AIC - min(AIC), likelihood = exp(-0.5 * delta_AIC), akaike_weight = likelihood / sum(likelihood)) %>%
arrange(Variable, delta_AIC) %>% ungroup()
best_models_summary <- aic_ranking %>%
group_by(Variable) %>% slice_min(order_by = delta_AIC, n = 1, with_ties = FALSE) %>%
dplyr::select(Variable, Best_Evo_Model = Evolutionary_Model, Best_Model_Type = Model_Type, AIC, akaike_weight)
message("Summary of the best models based on AIC:"); print(as.data.frame(best_models_summary))
#--------------------------------------------------------------------------
# --- 7. VISUALIZING THE BEST MODEL ---
#--------------------------------------------------------------------------
message("\nIdentifying best model and generating prediction plot...")
best_model_info <- aic_ranking %>%
filter(Model_Type == "PCNM") %>%
slice_min(order_by = AIC, n = 1, with_ties = FALSE)
best_predictor_name <- best_model_info$Variable
best_evo_model_name <- best_model_info$Evolutionary_Model
message(paste("Best model found: shape ~", best_predictor_name, "with PCNMs and", best_evo_model_name, "evolution."))
# Fit the final, best multivariate PGLS model again for plotting
best_cor_structure <- evo_models_list[[best_evo_model_name]]
best_formula <- as.formula(paste("shape.2d ~", best_predictor_name, "+", paste(pcnm_covariates, collapse = " + ")))
# Verifique se sua linha estÃ¡ assim, especialmente a parte "phy = tree"
gdf <- geomorph.data.frame(shape = adj.shape, phy = tree, data)
final_model_fit <- procD.pgls(best_formula, phy = phy, data = gdf, corStruct = best_cor_structure, iter = 999)
# Define a color palette for consistency
cores_fac <- c("AF" ="green3","AM" = "darkgreen", "SV" = "#FFDB58")
# Create a vector of colors corresponding to each specimen's ecoregion
plot_colors <- cores_fac[as.factor(gdf$fac)]
# CORRECTED: Use the 'plot_colors' vector for the 'bg' argument to color points.
plot(final_model_fit, type = "regression", reg.type = "RegScore",
predictor = gdf[[best_predictor_name]],
main = paste("Shape Change Along", best_predictor_name),
pch = 21, cex = 3, bg = plot_colors, col = "gray20") # 'col' for point border
# Add a legend manually
legend("topleft", legend = names(cores_fac),
pch = 21, pt.bg = cores_fac,
title = "Ecoregion", bty = "n")
dev.off()
message("Shape change visualization plot saved to 'PGLS_Plot_Lima_ShapeChange.pdf'")
# Extract regression scores
regression_scores <- final_model_fit$pgls.residuals
# Create a data frame for ggplot, including the 'fac' column for coloring
plot_data <- data.frame(
predictor = gdf[[best_predictor_name]],
reg_score = regression_scores[,1], # Use the first column of regression scores
ecoregion = as.factor(gdf$fac)     # Add the ecoregion factor
)
# Define a color palette for consistency
cores_fac <- c("AF" ="green3","AM" = "darkgreen", "SV" = "#FFDB58")
names(cores_fac) <- levels(plot_data$ecoregion)
# Define a color palette for consistency
cores_fac <- c("AF" ="green3","AM" = "darkgreen", "SV" = "goldenrod1")
names(cores_fac) <- levels(plot_data$ecoregion)
# Create the plot
regression_plot <- ggplot(plot_data, aes(x = predictor, y = reg_score)) +
geom_point(aes(color = ecoregion), size = 5, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "black", linewidth = 1.2, aes(group = 1)) +
scale_color_manual(name = "Ecoregion", values = cores_fac) +
labs(
title = "PGLS Regression Plot",
subtitle = paste("Relationship between Shape and", best_predictor_name, "(controlled for phylogeny & space)"),
x = paste("Predictor values for", best_predictor_name),
y = "Regression Score (Shape variation along the predictor axis)"
) +
theme_minimal(base_size = 15) +
theme(legend.position = "bottom")
regression_plot
# Create the plot
regression_plot <- ggplot(plot_data, aes(x = predictor, y = reg_score)) +
geom_point(aes(color = ecoregion), size = 8, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "black", linewidth = 1.2, aes(group = 1)) +
scale_color_manual(name = "Ecoregion", values = cores_fac) +
labs(
title = "PGLS Regression Plot",
subtitle = paste("Relationship between Shape and", best_predictor_name, "(controlled for phylogeny & space)"),
x = paste("Predictor values for", best_predictor_name),
y = "Regression Score (Shape variation along the predictor axis)"
) +
theme_minimal(base_size = 15) +
theme(legend.position = "bottom")
regression_plot
regression_plot <- ggplot(plot_data, aes(x = predictor, y = reg_score)) +
geom_point(aes(color = ecoregion), size = 6, alpha = 0.85, shape = 21, stroke = 0.6, fill = "white") +
geom_smooth(method = "lm", se = FALSE, color = "black", linewidth = 1.2, aes(group = 1)) +
scale_color_manual(name = "Ecoregion", values = cores_fac) +
labs(
title = "PGLS Regression Plot",
subtitle = paste("Shape variation along", best_predictor_name, "\n(controlled for phylogeny and spatial autocorrelation)"),
x = paste("Predictor:", best_predictor_name),
y = "Regression Score (shape axis)"
) +
theme_classic(base_size = 15) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 13),
legend.text = element_text(size = 11),
plot.title = element_text(face = "bold", size = 18),
plot.subtitle = element_text(size = 13),
axis.title = element_text(size = 14)
)
regression_plot
bioma_shapes <- c("Atlantic Forest" = 16, "Amazon" = 15, "SVcay" = 17, "SVlib" = 25)  # Shapes por bioma
regression_plot <- ggplot(plot_data, aes(x = predictor, y = reg_score)) +
geom_point(aes(fill = ecoregion, shape = ecoregion), size = 6, alpha = 0.85, stroke = 0.6, color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "black", linewidth = 1.2, aes(group = 1)) +
scale_fill_manual(name = "Ecoregion", values = cores_fac) +
scale_shape_manual(name = "Ecoregion", values = bioma_shapes) +
labs(
title = "PGLS Regression Plot",
subtitle = paste("Shape variation along", best_predictor_name, "\n(controlled for phylogeny and spatial autocorrelation)"),
x = paste("Predictor:", best_predictor_name),
y = "Regression Score (shape axis)"
) +
theme_classic(base_size = 15) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 13),
legend.text = element_text(size = 11),
plot.title = element_text(face = "bold", size = 18),
plot.subtitle = element_text(size = 13),
axis.title = element_text(size = 14)
) +
guides(
fill = guide_legend(override.aes = list(shape = 21)),
shape = guide_legend(override.aes = list(fill = "white"))
)
print(regression_plot)
names(cores_fac)
names(bioma_shapes)
bioma_shapes <- c("AF" = 16, "AM" = 15, "SV" = 17)  # Shapes por bioma
regression_plot <- ggplot(plot_data, aes(x = predictor, y = reg_score)) +
geom_point(aes(fill = ecoregion, shape = ecoregion), size = 6, alpha = 0.85, stroke = 0.6, color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "black", linewidth = 1.2, aes(group = 1)) +
scale_fill_manual(name = "Ecoregion", values = cores_fac) +
scale_shape_manual(name = "Ecoregion", values = bioma_shapes) +
labs(
title = "PGLS Regression Plot",
subtitle = paste("Shape variation along", best_predictor_name, "\n(controlled for phylogeny and spatial autocorrelation)"),
x = paste("Predictor:", best_predictor_name),
y = "Regression Score (shape axis)"
) +
theme_classic(base_size = 15) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 13),
legend.text = element_text(size = 11),
plot.title = element_text(face = "bold", size = 18),
plot.subtitle = element_text(size = 13),
axis.title = element_text(size = 14)
) +
guides(
fill = guide_legend(override.aes = list(shape = 21)),
shape = guide_legend(override.aes = list(fill = "white"))
)
print(regression_plot)
names(cores_fac)
names(bioma_shapes)
regression_plot <- ggplot(plot_data, aes(x = predictor, y = reg_score)) +
geom_point(aes(color = ecoregion, shape = ecoregion), size = 6, alpha = 0.9) +
geom_smooth(method = "lm", se = FALSE, color = "black", linewidth = 1.2, aes(group = 1)) +
scale_color_manual(name = "Ecoregion", values = cores_fac) +
scale_shape_manual(name = "Ecoregion", values = bioma_shapes) +
labs(
title = "PGLS Regression Plot",
subtitle = paste("Shape variation along", best_predictor_name, "\n(controlled for phylogeny and spatial autocorrelation)"),
x = paste("Predictor:", best_predictor_name),
y = "Regression Score (shape axis)"
) +
theme_classic(base_size = 15) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 13),
legend.text = element_text(size = 11),
plot.title = element_text(face = "bold", size = 18),
plot.subtitle = element_text(size = 13),
axis.title = element_text(size = 14)
)
print(regression_plot)
regression_plot <- ggplot(plot_data, aes(x = predictor, y = reg_score)) +
geom_point(aes(color = ecoregion, shape = ecoregion), size = 8, alpha = 0.9) +
geom_smooth(method = "lm", se = FALSE, color = "black", linewidth = 1.2, aes(group = 1)) +
scale_color_manual(name = "Ecoregion", values = cores_fac) +
scale_shape_manual(name = "Ecoregion", values = bioma_shapes) +
labs(
title = "PGLS Regression Plot",
subtitle = paste("Shape variation along", best_predictor_name, "\n(controlled for phylogeny and spatial autocorrelation)"),
x = paste("Predictor:", best_predictor_name),
y = "Regression Score (shape axis)"
) +
theme_classic(base_size = 15) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 13),
legend.text = element_text(size = 11),
plot.title = element_text(face = "bold", size = 18),
plot.subtitle = element_text(size = 13),
axis.title = element_text(size = 14)
)
print(regression_plot)
# Get the vector of the best predictor variable from the geomorph data frame
predictor_vec <- gdf[[best_predictor_name]]
# Use shape.predictor to calculate the shapes at min and max values
# Note: PGLS is not used here, this is a visualization of the raw relationship
# as shown in your example script.
preds <- shape.predictor(
adj.shape,
x = predictor_vec,
Intercept = FALSE, # Use FALSE as it's a single predictor
predmin = min(predictor_vec),
predmax = max(predictor_vec)
)
# Calculate the mean shape (mshape)
mshape <- mshape(adj.shape)
if (exists("Sapajusoutline") && exists("GP")) {
pdf("PGLS_Plot_Lima_ShapeExtremes.pdf", width = 12, height = 6)
# Set up a 1x2 plot layout
par(mfrow = c(1, 2))
# Plot 1: Shape at the minimum predictor value
plotRefToTarget(mshape, preds$predmin,
mag = 2, outline = Sapajusoutline$outline,
method = "points", gridPars = GP)
title(paste("Shape at Min", best_predictor_name))
# Plot 2: Shape at the maximum predictor value
plotRefToTarget(mshape, preds$predmax,
mag = 2, outline = Sapajusoutline$outline,
method = "points", gridPars = GP)
title(paste("Shape at Max", best_predictor_name))
# Close the PDF device
dev.off()
# Reset plot layout
par(mfrow = c(1, 1))
message("Plot of shape extremes saved to 'PGLS_Plot_Lima_ShapeExtremes.pdf'")
} else {
message("Visualization of shape extremes skipped: 'Sapajusoutline' and/or 'GP' objects not found.")
}
message("\nAll analyses are complete.")
# Close the PDF device
dev.off()
# Reset plot layout
par(mfrow = c(1, 1))
# --- 1. REQUIRED PACKAGES ---
# Make sure all are installed
library(tidyverse) # For data manipulation and plots (dplyr, purrr)
library(nlme)      # Essential for the gls function
library(ape)       # For correlation structures (corPagel, etc.)
library(progress)  # For a visual progress bar
# --- 2a. Variable Selection and Data Merging ---
# List of environmental predictor variables
bio_vars <- c(paste0("bio", 1:19), "humid", "npp", "soilmoist")
# Definition of spatial covariates (PCNMs)
pcnm_covariates <- c("pcnm1", "pcnm5")
colnames(pcnm) <- paste0("pcnm", 1:ncol(pcnm))
# To prevent duplication on re-runs, remove any existing pcnm columns first.
data <- data %>% dplyr::select(-starts_with("pcnm"))
data <- bind_cols(data, as.data.frame(pcnm))
# --- 2b. CRITICAL: Ensure Species Column for PGLS ---
# The PGLS functions need a column with species names to match data to the tree.
if("sp_ives" %in% names(data) && !"species" %in% names(data)) {
data$species <- data$sp_ives
} else if (!"species" %in% names(data)) {
stop("A column named 'species' or 'sp_ives' with names matching the tree tips is required in your 'data' frame.")
}
rownames(data) <- data$species
# --- 2c. Data Standardization ---
# Standardizes the new response variable (logCS) and all predictors.
if(!"CS" %in% names(data)) stop("Data frame must contain a 'CS' (Centroid Size) column.")
data_scaled <- data %>%
mutate(
logCS = as.numeric(scale(log(CS))), # NEW RESPONSE VARIABLE
across(all_of(bio_vars), ~ as.numeric(scale(.)))
)
#--------------------------------------------------------------------------
# --- 3. MASTER PGLS FUNCTION ---
#--------------------------------------------------------------------------
run_pgls_master <- function(predictor_var, evo_model_name, cor_structure, data, covariates = NULL) {
# NEW RESPONSE VARIABLE: logCS
if (is.null(covariates)) {
formula_str <- paste("logCS ~", predictor_var)
} else {
covariates_str <- paste(covariates, collapse = " + ")
formula_str <- paste("logCS ~", predictor_var, "+", covariates_str)
}
formula <- as.formula(formula_str)
fit_control <- glsControl(maxIter = 200, msMaxIter = 200)
fit <- try(
gls(formula, data = data, correlation = cor_structure, method = "REML", control = fit_control),
silent = TRUE
)
if (inherits(fit, "try-error")) {
return(data.frame(
Variable = predictor_var, Beta = NA, T_value = NA, P_value = NA, AIC = NA, BIC = NA, Std_Error = NA,
Evo_Param_Value = NA, Evolutionary_Model = evo_model_name, Model_Type = ifelse(is.null(covariates), "Pure", "PCNM")
))
}
fited <- summary(fit)
coef_summary <- fited$tTable
beta <- coef_summary[2, "Value"]; t_value <- coef_summary[2, "t-value"]; p_value <- coef_summary[2, "p-value"]; std_error <- coef_summary[2, "Std.Error"]
evo_param <- try(coef(fit$modelStruct$corStruct, unconstrained = FALSE), silent = TRUE)
if (inherits(evo_param, "try-error") || length(evo_param) == 0) evo_param <- NA
data.frame(
Variable = predictor_var, Beta = beta, T_value = t_value, P_value = p_value, AIC = fited$AIC,
BIC = fited$BIC, Std_Error = std_error, Evo_Param_Value = evo_param,
Evolutionary_Model = evo_model_name, Model_Type = ifelse(is.null(covariates), "Pure", "PCNM")
)
}
#--------------------------------------------------------------------------
# --- 4. EXECUTION OF ALL ANALYSES ---
#--------------------------------------------------------------------------
evo_models_list <- list(
"Brownian" = corBrownian(1, tree, form = ~species),
"Pagel"    = corPagel(1, tree, fixed = FALSE, form = ~species),
"Martins"  = corMartins(1, tree, fixed = FALSE, form = ~species),
"Grafen"   = corGrafen(0.5, tree, fixed = FALSE, form = ~species)
)
analysis_grid <- expand_grid(predictor = bio_vars, evo_model_name = names(evo_models_list))
pb <- progress_bar$new(format = " Running models [:bar] :percent in :elapsed | ETA: :eta", total = nrow(analysis_grid) * 2, clear = FALSE, width = 80)
message("Starting execution of all PGLS models for Size (logCS)...")
all_results <- pmap_df(analysis_grid, function(predictor, evo_model_name) {
pb$tick(); result_pure <- run_pgls_master(predictor, evo_model_name, evo_models_list[[evo_model_name]], data_scaled, NULL)
pb$tick(); result_pcnm <- run_pgls_master(predictor, evo_model_name, evo_models_list[[evo_model_name]], data_scaled, pcnm_covariates)
bind_rows(result_pure, result_pcnm)
})
#--------------------------------------------------------------------------
# --- 5. FINAL CONSOLIDATION AND EXPORT ---
#--------------------------------------------------------------------------
final_results_table <- all_results %>% arrange(Variable, Evolutionary_Model, Model_Type)
write.csv(final_results_table, "PGLS_Size_Lima.csv", row.names = FALSE)
#write.csv(final_results_table, "PGLS_Size_Lima.csv", row.names = FALSE)
message("\nMain analysis completed successfully!")
message("All results have been saved to 'PGLS_Size_Lima.csv'")
#--------------------------------------------------------------------------
# --- 6. MODEL COMPARISON AND SELECTION ---
#--------------------------------------------------------------------------
message("\nCalculating AIC-based model ranks...")
aic_ranking <- final_results_table %>%
filter(!is.na(AIC)) %>% group_by(Variable) %>%
mutate(delta_AIC = AIC - min(AIC, na.rm = TRUE),
likelihood = exp(-0.5 * delta_AIC),
akaike_weight = likelihood / sum(likelihood)) %>%
arrange(Variable, delta_AIC) %>% ungroup()
best_models_summary <- aic_ranking %>%
group_by(Variable) %>% slice_min(order_by = delta_AIC, n = 1, with_ties = FALSE) %>%
dplyr::select(Variable, Best_Evo_Model = Evolutionary_Model, Best_Model_Type = Model_Type, AIC, akaike_weight)
message("Summary of the best models based on AIC:"); print(as.data.frame(best_models_summary))
#--------------------------------------------------------------------------
# --- 7. VISUALIZING THE BEST MODEL ---
#--------------------------------------------------------------------------
message("\nIdentifying best model and generating a regression plot...")
best_model_info <- aic_ranking %>%
filter(Model_Type == "PCNM") %>%
slice_min(order_by = AIC, n = 1, with_ties = FALSE)
if (nrow(best_model_info) > 0) {
best_predictor_name <- best_model_info$Variable
best_evo_model_name <- best_model_info$Evolutionary_Model
message(paste("Best model found: logCS ~", best_predictor_name, "with PCNMs and", best_evo_model_name, "evolution."))
# Fit the final, best model again to get predictions for plotting
best_cor_structure <- evo_models_list[[best_evo_model_name]]
best_formula_str <- paste("logCS ~", best_predictor_name, "+", paste(pcnm_covariates, collapse = " + "))
best_formula <- as.formula(best_formula_str)
final_model_fit <- gls(best_formula, data = data_scaled, correlation = best_cor_structure, method = "REML")
# Add predicted values to the data frame
data_scaled$predicted_logCS <- predict(final_model_fit)
# --- Generate and save the regression plot ---
# Create a data frame for ggplot, including the 'fac' column for coloring
plot_data <- data.frame(
predictor = data_scaled[[best_predictor_name]],
response = data_scaled$logCS,
predicted = data_scaled$predicted_logCS,
ecoregion = as.factor(data_scaled$fac)
)
cores_fac <- c("AF" ="green3","AM" = "darkgreen", "SV" = "#FFDB58")
names(cores_fac) <- levels(plot_data$ecoregion)
regression_plot <- ggplot(plot_data, aes(x = predictor, y = response)) +
geom_point(aes(color = ecoregion), size = 3, alpha = 0.8) +
geom_line(aes(y = predicted), color = "black", linewidth = 1.2) +
scale_color_manual(name = "Ecoregion", values = cores_fac) +
labs(
title = "PGLS Regression of Size vs. Environment",
subtitle = paste("Best Model: log(CS) ~", best_predictor_name, "+ PCNMs (", best_evo_model_name, ")"),
x = paste("Standardized", best_predictor_name),
y = "Standardized log(Centroid Size)"
) +
theme_minimal(base_size = 15) +
theme(legend.position = "bottom")
ggsave("PGLS_Plot_Size_Lima.pdf", plot = regression_plot, width = 8, height = 6)
message("Regression plot saved to 'PGLS_Plot_Size_Lima.pdf'")
} else {
message("Visualization skipped: Could not identify a best PCNM model from the results.")
}
message("\nAll analyses are complete.")
# --- Generate and save the regression plot ---
# Create a data frame for ggplot, including the 'fac' column for coloring
plot_data <- data.frame(
predictor = data_scaled[[best_predictor_name]],
response = data_scaled$logCS,
ecoregion = as.factor(data_scaled$fac)
)
cores_fac <- c("AF" = "green3", "AM" = "darkgreen", "SV" = "#FFDB58")
names(cores_fac) <- levels(plot_data$ecoregion)
# Extrai os coeficientes do modelo para a linha de regressÃ£o
model_coeffs <- coef(final_model_fit)
intercept <- model_coeffs["(Intercept)"]
slope <- model_coeffs[best_predictor_name]
# Bloco de cÃ³digo revisado e limpo
regression_plot <- ggplot(plot_data, aes(x = predictor, y = response)) +
geom_point(aes(color = ecoregion), size = 3, alpha = 0.8) +
geom_abline(intercept = intercept, slope = slope, color = "black", linewidth = 1.2) +
scale_color_manual(name = "Ecoregion", values = cores_fac) +
labs(
title = "PGLS Regression of Size vs. Environment",
subtitle = paste("Best Model: log(CS) ~", best_predictor_name, "+ PCNMs (", best_evo_model_name, ")"),
x = paste("Standardized", best_predictor_name),
y = "Standardized log(Centroid Size)"
) +
theme_minimal(base_size = 15) +
theme(legend.position = "bottom")
regression_plot
# Bloco de cÃ³digo revisado e limpo
# Shapes com preenchimento (21â25)
bioma_shapes <- c("AF" = 21, "AM" = 22, "SV" = 24)
regression_plot <- ggplot(plot_data, aes(x = predictor, y = response)) +
geom_point(
aes(fill = ecoregion, shape = ecoregion),
size = 6,
alpha = 0.85,
stroke = 0.7,
color = "black"  # contorno
) +
geom_abline(intercept = intercept, slope = slope, color = "black", linewidth = 1.2) +
scale_fill_manual(name = "Ecoregion", values = cores_fac) +
scale_shape_manual(name = "Ecoregion", values = bioma_shapes) +
labs(
title = "PGLS Regression of Size vs. Environment",
subtitle = paste("Best Model: log(CS) ~", best_predictor_name, "+ PCNMs (", best_evo_model_name, ")"),
x = paste("Standardized", best_predictor_name),
y = "Standardized log(Centroid Size)"
) +
theme_classic(base_size = 15) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 13),
legend.text = element_text(size = 11),
plot.title = element_text(face = "bold", size = 18),
plot.subtitle = element_text(size = 13),
axis.title = element_text(size = 14)
) +
guides(
fill = guide_legend(override.aes = list(shape = 21)),
shape = guide_legend(override.aes = list(fill = "white"))
)
print(regression_plot)
regression_plot <- ggplot(plot_data, aes(x = predictor, y = response)) +
geom_point(
aes(fill = ecoregion, shape = ecoregion),
size = 8,
alpha = 0.85,
stroke = 0.7,
color = "black"  # contorno
) +
geom_abline(intercept = intercept, slope = slope, color = "black", linewidth = 1.2) +
scale_fill_manual(name = "Ecoregion", values = cores_fac) +
scale_shape_manual(name = "Ecoregion", values = bioma_shapes) +
labs(
title = "PGLS Regression of Size vs. Environment",
subtitle = paste("Best Model: log(CS) ~", best_predictor_name, "+ PCNMs (", best_evo_model_name, ")"),
x = paste("Standardized", best_predictor_name),
y = "Standardized log(Centroid Size)"
) +
theme_classic(base_size = 15) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 13),
legend.text = element_text(size = 11),
plot.title = element_text(face = "bold", size = 18),
plot.subtitle = element_text(size = 13),
axis.title = element_text(size = 14)
) +
guides(
fill = guide_legend(override.aes = list(shape = 21)),
shape = guide_legend(override.aes = list(fill = "white"))
)
print(regression_plot)
